// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import React, { useCallback, useEffect, useMemo } from 'react';
import { useIsParticularSidePaneOpen } from './SidePaneProvider';
import { SidePaneHeader } from '../../../common/SidePaneHeader';
import { PeoplePaneContent } from '../../../common/PeoplePaneContent';
import { useLocale } from '../../../localization';
const PEOPLE_SIDE_PANE_ID = 'people';
/** @private */
export const usePeoplePane = (props) => {
    const { updateSidePaneRenderer, inviteLink, onFetchAvatarPersonaData, onFetchParticipantMenuItems, setDrawerMenuItems, mobileView } = props;
    const closePane = useCallback(() => {
        updateSidePaneRenderer(undefined);
    }, [updateSidePaneRenderer]);
    const localeStrings = localeTrampoline(useLocale());
    const onRenderHeader = useCallback(() => React.createElement(SidePaneHeader, { onClose: closePane, headingText: localeStrings.peoplePaneTitle, dismissSidePaneButtonAriaLabel: localeStrings.dismissSidePaneButtonLabel, mobileView: mobileView !== null && mobileView !== void 0 ? mobileView : false }), [mobileView, closePane, localeStrings]);
    const onRenderContent = useCallback(() => {
        return React.createElement(PeoplePaneContent, { inviteLink: inviteLink, onFetchAvatarPersonaData: onFetchAvatarPersonaData, onFetchParticipantMenuItems: onFetchParticipantMenuItems, setDrawerMenuItems: setDrawerMenuItems, mobileView: mobileView });
    }, [inviteLink, mobileView, onFetchAvatarPersonaData, onFetchParticipantMenuItems, setDrawerMenuItems]);
    const sidePaneRenderer = useMemo(() => ({
        headerRenderer: onRenderHeader,
        contentRenderer: onRenderContent,
        id: PEOPLE_SIDE_PANE_ID
    }), [onRenderContent, onRenderHeader]);
    const openPane = useCallback(() => {
        updateSidePaneRenderer(sidePaneRenderer);
    }, [sidePaneRenderer, updateSidePaneRenderer]);
    const isOpen = useIsParticularSidePaneOpen(PEOPLE_SIDE_PANE_ID);
    // Update pane renderer if it is open and the openPane dep changes
    useEffect(() => {
        if (isOpen) {
            openPane();
        }
    }, [isOpen, openPane]);
    return {
        openPeoplePane: openPane,
        closePeoplePane: closePane,
        isPeoplePaneOpen: isOpen
    };
};
// eslint-disable-next-line @typescript-eslint/no-explicit-any
const localeTrampoline = (locale) => {
    return locale.strings.callWithChat;
};
//# sourceMappingURL=usePeoplePane.js.map