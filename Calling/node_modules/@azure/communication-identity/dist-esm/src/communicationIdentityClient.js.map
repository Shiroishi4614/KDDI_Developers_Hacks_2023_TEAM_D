{"version":3,"file":"communicationIdentityClient.js","sourceRoot":"","sources":["../../src/communicationIdentityClient.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  CommunicationAccessToken,\n  CommunicationIdentityClientOptions,\n  CommunicationUserToken,\n  GetTokenForTeamsUserOptions,\n  TokenScope,\n} from \"./models\";\nimport {\n  CommunicationUserIdentifier,\n  createCommunicationAuthPolicy,\n  isKeyCredential,\n  parseClientArguments,\n} from \"@azure/communication-common\";\nimport { InternalClientPipelineOptions, OperationOptions } from \"@azure/core-client\";\nimport { KeyCredential, TokenCredential, isTokenCredential } from \"@azure/core-auth\";\nimport { IdentityRestClient } from \"./generated/src/identityRestClient\";\nimport { SpanStatusCode } from \"@azure/core-tracing\";\nimport { createSpan } from \"./common/tracing\";\nimport { logger } from \"./common/logger\";\n\nconst isCommunicationIdentityClientOptions = (\n  options: any\n): options is CommunicationIdentityClientOptions =>\n  options && !isTokenCredential(options) && !isKeyCredential(options);\n\n/**\n * Client class for interacting with Azure Communication Services User Token Management.\n */\nexport class CommunicationIdentityClient {\n  /**\n   * A reference to the auto-generated UserToken HTTP client.\n   */\n  private readonly client: IdentityRestClient;\n\n  /**\n   * Initializes a new instance of the CommunicationIdentity class.\n   * @param connectionString - Connection string to connect to an Azure Communication Service resource.\n   *                         Example: \"endpoint=https://contoso.eastus.communications.azure.net/;accesskey=secret\";\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   */\n  public constructor(connectionString: string, options?: CommunicationIdentityClientOptions);\n\n  /**\n   * Initializes a new instance of the CommunicationIdentity class using an Azure KeyCredential.\n   * @param endpoint - The endpoint of the service (ex: https://contoso.eastus.communications.azure.net).\n   * @param credential - An object that is used to authenticate requests to the service. Use the AzureKeyCredential or `@azure/identity` to create a credential.\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   */\n  public constructor(\n    endpoint: string,\n    credential: KeyCredential,\n    options?: CommunicationIdentityClientOptions\n  );\n  /**\n   * Initializes a new instance of the CommunicationIdentity class using a TokenCredential.\n   * @param endpoint - The endpoint of the service (ex: https://contoso.eastus.communications.azure.net)\n   * @param credential - TokenCredential that is used to authenticate requests to the service.\n   * @param options - Optional. Options to configure the HTTP pipeline.\n   */\n  public constructor(\n    endpoint: string,\n    credential: TokenCredential,\n    options?: CommunicationIdentityClientOptions\n  );\n\n  public constructor(\n    connectionStringOrEndpoint: string,\n    credentialOrOptions?: KeyCredential | CommunicationIdentityClientOptions | TokenCredential,\n    maybeOptions: CommunicationIdentityClientOptions = {}\n  ) {\n    const { url, credential } = parseClientArguments(\n      connectionStringOrEndpoint,\n      credentialOrOptions\n    );\n    const options = isCommunicationIdentityClientOptions(credentialOrOptions)\n      ? credentialOrOptions\n      : maybeOptions;\n\n    const internalPipelineOptions: InternalClientPipelineOptions = {\n      ...options,\n      ...{\n        loggingOptions: {\n          logger: logger.info,\n        },\n      },\n    };\n\n    this.client = new IdentityRestClient(url, { endpoint: url, ...internalPipelineOptions });\n\n    const authPolicy = createCommunicationAuthPolicy(credential);\n    this.client.pipeline.addPolicy(authPolicy);\n  }\n\n  /**\n   * Creates a scoped user token.\n   *\n   * @param user - The user whose tokens are being issued.\n   * @param scopes - Scopes to include in the token.\n   * @param options - Additional options for the request.\n   */\n  public async getToken(\n    user: CommunicationUserIdentifier,\n    scopes: TokenScope[],\n    options: OperationOptions = {}\n  ): Promise<CommunicationAccessToken> {\n    const { span, updatedOptions } = createSpan(\"CommunicationIdentity-issueToken\", options);\n    try {\n      return await this.client.communicationIdentityOperations.issueAccessToken(\n        user.communicationUserId,\n        scopes,\n        updatedOptions\n      );\n    } catch (e: any) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Revokes all data and tokens created for a user.\n   *\n   * @param user - The user whose tokens are being revoked.\n   * @param options - Additional options for the request.\n   */\n  public async revokeTokens(\n    user: CommunicationUserIdentifier,\n    options: OperationOptions = {}\n  ): Promise<void> {\n    const { span, updatedOptions } = createSpan(\"CommunicationIdentity-revokeTokens\", options);\n    try {\n      await this.client.communicationIdentityOperations.revokeAccessTokens(\n        user.communicationUserId,\n        updatedOptions\n      );\n    } catch (e: any) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a single user.\n   *\n   * @param options - Additional options for the request.\n   */\n  public async createUser(options: OperationOptions = {}): Promise<CommunicationUserIdentifier> {\n    const { span, updatedOptions } = createSpan(\"CommunicationIdentity-createUser\", options);\n    try {\n      const result = await this.client.communicationIdentityOperations.create(updatedOptions);\n      return {\n        communicationUserId: result.identity.id,\n      };\n    } catch (e: any) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Creates a single user and a token simultaneously.\n   *\n   * @param scopes - Scopes to include in the token.\n   * @param options - Additional options for the request.\n   */\n  public async createUserAndToken(\n    scopes: TokenScope[],\n    options: OperationOptions = {}\n  ): Promise<CommunicationUserToken> {\n    const { span, updatedOptions } = createSpan(\n      \"CommunicationIdentity-createUserAndToken\",\n      options\n    );\n    try {\n      const { identity, accessToken } = await this.client.communicationIdentityOperations.create({\n        createTokenWithScopes: scopes,\n        ...updatedOptions,\n      });\n      return {\n        ...accessToken!,\n        user: { communicationUserId: identity.id },\n      };\n    } catch (e: any) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Triggers revocation event for user and deletes all its data.\n   *\n   * @param user - The user being deleted.\n   * @param options - Additional options for the request.\n   */\n  public async deleteUser(\n    user: CommunicationUserIdentifier,\n    options: OperationOptions = {}\n  ): Promise<void> {\n    const { span, updatedOptions } = createSpan(\"CommunicationIdentity-deleteUser\", options);\n    try {\n      await this.client.communicationIdentityOperations.delete(\n        user.communicationUserId,\n        updatedOptions\n      );\n    } catch (e: any) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Exchanges an Azure AD access token of a Teams user for a new Communication Identity access token with a matching expiration time.\n   *\n   * @param options - Options used to exchange an Azure AD access token of a Teams user for a new Communication Identity access token.\n   */\n  public async getTokenForTeamsUser(\n    options: GetTokenForTeamsUserOptions\n  ): Promise<CommunicationAccessToken> {\n    const { span, updatedOptions } = createSpan(\n      \"CommunicationIdentity-getTokenForTeamsUser\",\n      options\n    );\n    const { teamsUserAadToken, clientId, userObjectId } = options;\n    try {\n      return await this.client.communicationIdentityOperations.exchangeTeamsUserAccessToken(\n        teamsUserAadToken,\n        clientId,\n        userObjectId,\n        updatedOptions\n      );\n    } catch (e: any) {\n      span.setStatus({\n        code: SpanStatusCode.ERROR,\n        message: e.message,\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n}\n"]}