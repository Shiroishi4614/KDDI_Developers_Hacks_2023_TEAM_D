// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import React, { useCallback, useMemo } from 'react';
import { useAdaptedSelector } from '../hooks/useAdaptedSelector';
import { useHandlers } from '../hooks/useHandlers';
import { LocalDeviceSettings } from '../components/LocalDeviceSettings';
import { StartCallButton } from '../components/StartCallButton';
import { devicePermissionSelector } from '../selectors/devicePermissionSelector';
import { useSelector } from '../hooks/useSelector';
import { DevicesButton, ErrorBar } from "../../../../../react-components/src";
import { getCallingSelector } from "../../../../../calling-component-bindings/src";
import { Panel, Stack } from '@fluentui/react';
import { fillWidth, panelFocusProps, panelStyles } from '../styles/CallConfiguration.styles';
import { LocalPreview } from '../components/LocalPreview';
import { callDetailsStyleDesktop, callDetailsStyleMobile, configurationStackTokensDesktop, configurationStackTokensMobile, configurationContainerStyleDesktop, configurationContainerStyleMobile, selectionContainerStyle, startCallButtonContainerStyleDesktop, startCallButtonContainerStyleMobile, startCallButtonStyleMobile, titleContainerStyleDesktop, titleContainerStyleMobile, callDetailsContainerStylesDesktop } from '../styles/CallConfiguration.styles';
import { useLocale } from '../../localization';
import { bannerNotificationStyles } from '../styles/CallPage.styles';
import { usePropsFor } from '../hooks/usePropsFor';
import { useAdapter } from '../adapter/CallAdapterProvider';
import { ConfigurationPageErrorBar } from '../components/ConfigurationPageErrorBar';
import { SidePane } from '../components/SidePane/SidePane';
/**
 * @private
 */
export const ConfigurationPage = (props) => {
    var _a;
    const { startCallHandler, mobileView, modalLayerHostId } = props;
    const options = useAdaptedSelector(getCallingSelector(DevicesButton));
    const localDeviceSettingsHandlers = useHandlers(LocalDeviceSettings);
    const { video: cameraPermissionGranted, audio: microphonePermissionGranted } = useSelector(devicePermissionSelector);
    let errorBarProps = usePropsFor(ErrorBar);
    const adapter = useAdapter();
    const deviceState = adapter.getState().devices;
    let disableStartCallButton = !microphonePermissionGranted || ((_a = deviceState.microphones) === null || _a === void 0 ? void 0 : _a.length) === 0;
    const locale = useLocale();
    const title = React.createElement(Stack.Item, { className: mobileView ? titleContainerStyleMobile : titleContainerStyleDesktop, role: "heading", "aria-level": 1 }, locale.strings.call.configurationPageTitle);
    const callDescription = locale.strings.call.configurationPageCallDetails && React.createElement(Stack.Item, { className: mobileView ? callDetailsStyleMobile : callDetailsStyleDesktop }, locale.strings.call.configurationPageCallDetails);
    let mobileWithPreview = mobileView; // When permission API is not available, we want to show screen saying checking for access (disappears on its own)
    // then based on permission setting, we show permission denied or nothing
    const startCall = useCallback(() => __awaiter(void 0, void 0, void 0, function* () {
        startCallHandler();
    }), [startCallHandler]);
    const panelLayerProps = useMemo(() => ({
        hostId: modalLayerHostId
    }), [modalLayerHostId]);
    return React.createElement(Stack, { className: mobileView ? configurationContainerStyleMobile : configurationContainerStyleDesktop },
        React.createElement(Stack, { styles: bannerNotificationStyles },
            React.createElement(ConfigurationPageErrorBar, { errorBarProps: errorBarProps })),
        React.createElement(Stack, { verticalFill: true, grow: true, horizontal: true, className: fillWidth },
            React.createElement(Stack, { className: fillWidth, horizontal: !mobileWithPreview, horizontalAlign: mobileWithPreview ? 'stretch' : 'center', verticalAlign: "center", tokens: mobileWithPreview ? configurationStackTokensMobile : configurationStackTokensDesktop },
                mobileWithPreview && React.createElement(Stack.Item, null,
                    title,
                    callDescription),
                localPreviewTrampoline(mobileWithPreview),
                React.createElement(Stack, { className: mobileView ? undefined : selectionContainerStyle },
                    !mobileWithPreview && React.createElement(React.Fragment, null,
                        React.createElement(Stack.Item, { styles: callDetailsContainerStylesDesktop },
                            title,
                            callDescription),
                        React.createElement(LocalDeviceSettings, Object.assign({}, options, localDeviceSettingsHandlers, { cameraPermissionGranted: cameraPermissionGrantedTrampoline(cameraPermissionGranted), microphonePermissionGranted: micPermissionGrantedTrampoline(microphonePermissionGranted) }))),
                    React.createElement(Stack, { styles: mobileWithPreview ? startCallButtonContainerStyleMobile : startCallButtonContainerStyleDesktop },
                        React.createElement(StartCallButton, { className: mobileWithPreview ? startCallButtonStyleMobile : undefined, onClick: startCall, disabled: disableStartCallButton })))),
            React.createElement(Panel, { hasCloseButton: false, isBlocking: false, isHiddenOnDismiss: false, styles: panelStyles, focusTrapZoneProps: panelFocusProps, layerProps: panelLayerProps },
                React.createElement(SidePane, { mobileView: props.mobileView, updateSidePaneRenderer: props.updateSidePaneRenderer }))));
};
const localPreviewTrampoline = (mobileView, doNotShow) => {
    return React.createElement(LocalPreview, { mobileView: mobileView, showDevicesButton: mobileView });
};
const cameraPermissionGrantedTrampoline = (cameraPermissionGranted, videoState) => {
    return cameraPermissionGranted;
};
const micPermissionGrantedTrampoline = (microphonePermissionGranted, audioState) => {
    return microphonePermissionGranted;
};
//# sourceMappingURL=ConfigurationPage.js.map