{"version":3,"file":"CustomButton.js","sourceRoot":"","sources":["../../../../../../../preprocess-dist/react-composites/src/composites/common/ControlBar/CustomButton.tsx"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\n// eslint-disable-next-line no-restricted-imports\nimport { Icon, IContextualMenuItem, mergeStyleSets } from '@fluentui/react';\nimport { ControlBarButton, _DrawerMenuItemProps } from '@internal/react-components';\nimport React from 'react';\nimport { _CommonCallControlOptions, CustomCallControlButtonCallbackArgs, CustomControlButtonProps } from '../types/CommonCallControlOptions';\nimport { CallControlDisplayType } from '../types/CommonCallControlOptions';\nimport { CommonCallControlOptions } from '../types/CommonCallControlOptions';\n\n/**\n * Max number of Custom Buttons in primary and secondary ControlBar\n * Does not include existing buttons in the controlBar.\n *\n * @private\n */\nexport const CUSTOM_BUTTON_OPTIONS = {\n  MAX_PRIMARY_DESKTOP_CUSTOM_BUTTONS: 3,\n  MAX_PRIMARY_MOBILE_CUSTOM_BUTTONS: 1,\n  MAX_SECONDARY_DESKTOP_CUSTOM_BUTTONS: 2\n};\n\n/** @private */\nexport type CustomButtons = { [key in CustomCallControlButtonPlacement]: typeof ControlBarButton[] | undefined };\n\n/** @private */\nexport const generateCustomCallControlBarButton = (onFetchCustomButtonProps?: CustomCallControlButtonCallback[], displayType?: CallControlDisplayType): CustomButtons => {\n  const allButtonProps = onFetchCustomButtonProps?.map(callback => callback({\n    displayType\n  }));\n  return {\n    primary: generateCustomControlBarButtons('primary', allButtonProps),\n    secondary: generateCustomControlBarButtons('secondary', allButtonProps),\n    overflow: generateCustomControlBarButtons('overflow', allButtonProps)\n  };\n};\n\n/** @private */\nconst generateCustomControlBarButtons = (placement: CustomCallControlButtonPlacement, customButtons?: CustomCallControlButtonProps[]): typeof ControlBarButton[] => customButtons ? customButtons.filter(buttonProps => buttonProps.placement === placement).map((buttonProps, i) => internalProps => {\n  if (buttonProps['onRenderButton']) {\n    return buttonProps['onRenderButton'](internalProps);\n  }\n  return <ControlBarButton ariaDescription={buttonProps.ariaDescription ?? internalProps.ariaDescription} ariaLabel={buttonProps.ariaLabel ?? internalProps.ariaLabel} disabled={buttonProps.disabled ?? internalProps.disabled} id={buttonProps.id ?? internalProps.id} key={buttonProps.key ?? `${buttonProps.placement}_${i}`} onClick={buttonProps.onItemClick ?? internalProps.onClick} onRenderIcon={() => <Icon iconName={buttonProps.iconName ?? internalProps.iconProps?.iconName ?? 'ControlButtonOptions'} />} showLabel={buttonProps.showLabel ?? internalProps.showLabel} text={buttonProps.text ?? internalProps.text} styles={mergeStyleSets(internalProps.styles, buttonProps.styles)} />;\n}) : [];\n\n/** @private */\nconst generateCustomDrawerButtons = (placement: CustomCallControlButtonPlacement, customButtons?: CustomCallControlButtonProps[]): _DrawerMenuItemProps[] => customButtons ? customButtons.filter(buttonProps => buttonProps.placement === placement).map((buttonProps, i): _DrawerMenuItemProps => ({\n  ...buttonProps,\n  disabled: buttonProps.disabled,\n  iconProps: {\n    iconName: buttonProps.iconName\n  },\n  id: buttonProps.id,\n  itemKey: buttonProps.key ? '' + buttonProps.key : `${buttonProps.placement}_${i}`,\n  onItemClick: buttonProps.onItemClick,\n  text: buttonProps.text\n})) : [];\n\n/** @private */\nexport type CustomDrawerButtons = { [key in CustomCallControlButtonPlacement]: _DrawerMenuItemProps[] };\n\n/** @private */\nexport const generateCustomCallDrawerButtons = (onFetchCustomButtonProps?: CustomCallControlButtonCallback[], displayType?: CallControlDisplayType): CustomDrawerButtons => {\n  const customButtons = onFetchCustomButtonProps?.map(callback => callback({\n    displayType\n  }));\n  return {\n    primary: generateCustomDrawerButtons('primary', customButtons),\n    secondary: generateCustomDrawerButtons('secondary', customButtons),\n    overflow: generateCustomDrawerButtons('overflow', customButtons)\n  };\n};\n\n/** @private */\nexport type CustomDesktopOverflowButtons = { [key in CustomCallControlButtonPlacement]: IContextualMenuItem[] };\n\n/** @private */\nexport const generateCustomCallDesktopOverflowButtons = (onFetchCustomButtonProps?: CustomCallControlButtonCallback[], displayType?: CallControlDisplayType): CustomDesktopOverflowButtons => {\n  const customButtons = onFetchCustomButtonProps?.map(callback => callback({\n    displayType\n  }));\n  return {\n    primary: generateCustomDrawerButtons('primary', customButtons).map(drawerMenuItemToContextualMenuItem),\n    secondary: generateCustomDrawerButtons('secondary', customButtons).map(drawerMenuItemToContextualMenuItem),\n    overflow: generateCustomDrawerButtons('overflow', customButtons).map(drawerMenuItemToContextualMenuItem)\n  };\n};\n\n/** @private */\nexport const drawerMenuItemToContextualMenuItem = (item: _DrawerMenuItemProps): IContextualMenuItem => ({\n  ...item,\n  key: item.itemKey,\n  onClick: item.onItemClick ? ev => {\n    item.onItemClick?.(ev);\n  } : undefined,\n  subMenuProps: item.subMenuProps ? {\n    items: item.subMenuProps.map(drawerMenuItemToContextualMenuItem)\n  } : undefined\n});\n\n/**\n * A callback that returns the props to render a custom {@link ControlBarButton} and {@link DrawerMenuItem}.\n *\n * The response indicates where the custom button should be placed.\n *\n * Performance tip: This callback is only called when either the callback or its arguments change.\n * @beta\n */\nexport type CustomCallControlButtonCallback = (args: CustomCallControlButtonCallbackArgs) => CustomCallControlButtonProps;\n\n/**\n * Placement for a custom button injected in the {@link CommonCallControlBar}.\n *\n * 'primary': Place the button(s) on the right end of the center control bar but before the EndCallButton (left end in rtl mode).\n * 'overflow': Place the buttons(s) on the end of the overflow Menu.\n * 'secondary': Place the button(s) on the left end of the side control bar (right in rtl mode).\n *\n * Multiple buttons assigned the same placement are appended in order.\n * E.g., if two buttons are placed in 'secondary', they'll both appear on the left end (right end in rtl mode)\n * in the order provided.\n *\n * Only 'primary' placement works when legacy call control is enabled in call composite\n *\n * @beta\n */\nexport type CustomCallControlButtonPlacement = 'primary' | 'overflow' | 'secondary';\n\n/**\n * Response from {@link CustomCallControlButtonCallback}.\n *\n * Includes the icon and placement prop necessary to indicate where to place the\n * {@link ControlBarButton} and a {@link DrawerMenuItem}\n *\n * @beta\n */\nexport interface CustomCallControlButtonProps extends CustomControlButtonProps {\n  /**\n   * Where to place the custom button relative to other buttons.\n   */\n  placement: CustomCallControlButtonPlacement;\n  /**\n   * Icon to render. Icon is a non-default icon name that needs to be registered as a\n   * custom icon using registerIcons through fluentui. Examples include icons from the fluentui library\n   */\n  iconName?: string;\n}\n\n/** @private */\nexport const onFetchCustomButtonPropsTrampoline = (options?: CommonCallControlOptions): CustomCallControlButtonCallback[] | undefined => {\n  let response: CustomCallControlButtonCallback[] | undefined = undefined;\n  response = (options as _CommonCallControlOptions)?.onFetchCustomButtonProps;\n  return response;\n};\"../../../../../react-components/src\""]}