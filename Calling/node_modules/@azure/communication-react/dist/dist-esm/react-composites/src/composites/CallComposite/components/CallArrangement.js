// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
import { mergeStyles, Stack } from '@fluentui/react';
import { _isInLobbyOrConnecting } from "../../../../../calling-component-bindings/src";
import { _ComplianceBanner, _DrawerMenu, _useContainerHeight, _useContainerWidth, ErrorBar, useTheme } from "../../../../../react-components/src";
import React, { useMemo, useRef, useState } from 'react';
import { useCallback } from 'react';
import { containerDivStyles } from '../../common/ContainerRectProps';
import { compositeMinWidthRem } from '../../common/styles/Composite.styles';
import { useAdapter } from '../adapter/CallAdapterProvider';
import { CallControls } from '../components/CallControls';
import { CommonCallControlBar } from '../../common/ControlBar/CommonCallControlBar';
import { callArrangementContainerStyles, notificationsContainerStyles, containerStyleDesktop, containerStyleMobile, mediaGalleryContainerStyles, galleryParentContainerStyles, bannerNotificationStyles, CONTROL_BAR_Z_INDEX, DRAWER_Z_INDEX } from '../styles/CallPage.styles';
import { MutedNotification } from './MutedNotification';
import { useSelector } from '../hooks/useSelector';
import { callStatusSelector } from '../selectors/callStatusSelector';
import { PreparedMoreDrawer } from '../../common/Drawer/PreparedMoreDrawer';
import { drawerContainerStyles } from '../styles/CallComposite.styles';
import { SidePane } from './SidePane/SidePane';
import { usePeoplePane } from './SidePane/usePeoplePane';
import { isDisabled } from '../utils';
import { useIsSidePaneOpen } from './SidePane/SidePaneProvider';
import { ModalLocalAndRemotePIP } from '../../common/ModalLocalAndRemotePIP';
import { getPipStyles } from '../../common/styles/ModalLocalAndRemotePIP.styles';
import { useMinMaxDragPosition } from '../../common/utils';
/**
 * @private
 */
export const CallArrangement = (props) => {
    var _a, _b, _c, _d, _e, _f, _g;
    const containerClassName = useMemo(() => {
        return props.mobileView ? containerStyleMobile : containerStyleDesktop;
    }, [props.mobileView]);
    const theme = useTheme();
    const callGalleryStyles = useMemo(() => galleryParentContainerStyles(theme.palette.neutralLighterAlt), [theme.palette.neutralLighterAlt]);
    const containerRef = useRef(null);
    const containerWidth = _useContainerWidth(containerRef);
    const containerHeight = _useContainerHeight(containerRef);
    const isInLobby = _isInLobbyOrConnecting(useSelector(callStatusSelector).callStatus);
    const { updateSidePaneRenderer } = props;
    const adapter = useAdapter();
    const [drawerMenuItems, setDrawerMenuItems] = useState([]);
    const peoplePaneProps = useMemo(() => {
        var _a;
        return ({
            updateSidePaneRenderer,
            setDrawerMenuItems,
            inviteLink: props.callControlProps.callInvitationURL,
            onFetchParticipantMenuItems: (_a = props.callControlProps) === null || _a === void 0 ? void 0 : _a.onFetchParticipantMenuItems,
            mobileView: props.mobileView
        });
    }, [updateSidePaneRenderer, props.callControlProps.callInvitationURL, (_a = props.callControlProps) === null || _a === void 0 ? void 0 : _a.onFetchParticipantMenuItems, props.mobileView]);
    const { isPeoplePaneOpen, openPeoplePane, closePeoplePane } = usePeoplePane(peoplePaneProps);
    const togglePeoplePane = useCallback(() => {
        if (isPeoplePaneOpen) {
            closePeoplePane();
        }
        else {
            openPeoplePane();
        }
    }, [closePeoplePane, isPeoplePaneOpen, openPeoplePane]);
    const isSidePaneOpen = useIsSidePaneOpen();
    const isMobileWithActivePane = props.mobileView && isSidePaneOpen;
    const callCompositeContainerCSS = useMemo(() => {
        return {
            display: isMobileWithActivePane ? 'none' : 'flex',
            minWidth: props.mobileView ? 'unset' : `${compositeMinWidthRem}rem`,
            width: '100%',
            height: '100%',
            position: 'relative'
        };
    }, [isMobileWithActivePane, props.mobileView]);
    const [showDrawer, setShowDrawer] = useState(false);
    const onMoreButtonClicked = useCallback(() => {
        setShowDrawer(true);
    }, []);
    const closeDrawer = useCallback(() => {
        setShowDrawer(false);
    }, []);
    const onMoreDrawerPeopleClicked = useCallback(() => {
        setShowDrawer(false);
        togglePeoplePane();
    }, [togglePeoplePane]);
    const drawerContainerStylesValue = useMemo(() => drawerContainerStyles(DRAWER_Z_INDEX), []);
    let canUnmute = true;
    let errorBarProps = props.errorBarProps;
    const minMaxDragPosition = useMinMaxDragPosition(props.modalLayerHostId);
    const pipStyles = useMemo(() => getPipStyles(theme), [theme]);
    return React.createElement("div", { ref: containerRef, className: mergeStyles(containerDivStyles), id: props.id },
        React.createElement(Stack, { verticalFill: true, horizontalAlign: "stretch", className: containerClassName, "data-ui-id": props.dataUiId },
            React.createElement(Stack, { grow: true, styles: callArrangementContainerStyles },
                ((_b = props.callControlProps) === null || _b === void 0 ? void 0 : _b.options) !== false && !isMobileWithActivePane && React.createElement(Stack.Item, { className: mergeStyles({
                        zIndex: CONTROL_BAR_Z_INDEX
                    }) }, isLegacyCallControlEnabled((_c = props.callControlProps) === null || _c === void 0 ? void 0 : _c.options) ? React.createElement(CallControls, Object.assign({}, props.callControlProps, { containerWidth: containerWidth, containerHeight: containerHeight, isMobile: props.mobileView })) : React.createElement(CommonCallControlBar, Object.assign({}, props.callControlProps, { callControls: props.callControlProps.options, callAdapter: adapter, mobileView: props.mobileView, disableButtonsForLobbyPage: isInLobby, peopleButtonChecked: isPeoplePaneOpen, onPeopleButtonClicked: togglePeoplePane, onMoreButtonClicked: onMoreButtonClicked }))),
                ((_d = props.callControlProps) === null || _d === void 0 ? void 0 : _d.options) !== false && showDrawer && React.createElement(Stack, { styles: drawerContainerStylesValue },
                    React.createElement(PreparedMoreDrawer, { callControls: props.callControlProps.options, onLightDismiss: closeDrawer, onPeopleButtonClicked: onMoreDrawerPeopleClicked })),
                React.createElement(Stack, { horizontal: true, grow: true },
                    React.createElement(Stack.Item, { style: callCompositeContainerCSS },
                        React.createElement(Stack.Item, { styles: callGalleryStyles, grow: true },
                            React.createElement(Stack, { verticalFill: true, styles: mediaGalleryContainerStyles },
                                React.createElement(Stack.Item, { styles: notificationsContainerStyles },
                                    React.createElement(Stack, { styles: bannerNotificationStyles },
                                        React.createElement(_ComplianceBanner, Object.assign({}, props.complianceBannerProps))),
                                    errorBarProps !== false && React.createElement(Stack, { styles: bannerNotificationStyles },
                                        React.createElement(ErrorBar, Object.assign({}, errorBarProps))),
                                    canUnmute && !!props.mutedNotificationProps && React.createElement(MutedNotification, Object.assign({}, props.mutedNotificationProps))),
                                props.onRenderGalleryContent && props.onRenderGalleryContent()))),
                    React.createElement(SidePane, { mobileView: props.mobileView, updateSidePaneRenderer: props.updateSidePaneRenderer, onPeopleButtonClicked: props.mobileView && !shouldShowPeopleTabHeaderButton(props.callControlProps.options) ? undefined : togglePeoplePane, disablePeopleButton: typeof props.callControlProps.options !== 'boolean' && isDisabled((_e = props.callControlProps.options) === null || _e === void 0 ? void 0 : _e.participantsButton), onChatButtonClicked: (_f = props.mobileChatTabHeader) === null || _f === void 0 ? void 0 : _f.onClick, disableChatButton: (_g = props.mobileChatTabHeader) === null || _g === void 0 ? void 0 : _g.disabled }),
                    props.mobileView && React.createElement(ModalLocalAndRemotePIP, { modalLayerHostId: props.modalLayerHostId, hidden: !isSidePaneOpen, styles: pipStyles, minDragPosition: minMaxDragPosition.minDragPosition, maxDragPosition: minMaxDragPosition.maxDragPosition }),
                    drawerMenuItems.length > 0 && React.createElement(Stack, { styles: drawerContainerStyles() },
                        React.createElement(_DrawerMenu, { onLightDismiss: () => setDrawerMenuItems([]), items: drawerMenuItems }))))));
};
const isLegacyCallControlEnabled = (options) => {
    var _a;
    // In stable builds, we default to legacy until new-call-control-bar feature is stablized.
    return options === undefined || options === true || ((_a = options) === null || _a === void 0 ? void 0 : _a.legacyControlBarExperience) !== false;
};
const shouldShowPeopleTabHeaderButton = (callControls) => {
    if (callControls === undefined || callControls === true) {
        return true;
    }
    if (callControls === false) {
        return false;
    }
    return callControls.participantsButton !== false && callControls.peopleButton !== false;
};
//# sourceMappingURL=CallArrangement.js.map