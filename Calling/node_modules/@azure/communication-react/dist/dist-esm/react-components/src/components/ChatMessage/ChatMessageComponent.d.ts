/// <reference types="react" />
import { MessageThreadStrings } from '../MessageThread';
import { ChatMessage, ComponentSlotStyle, OnRenderAvatarCallback } from '../../types';
import { FileDownloadHandler, FileMetadata } from '../FileDownloadCards';
declare type ChatMessageComponentProps = {
    message: ChatMessage;
    userId: string;
    messageContainerStyle?: ComponentSlotStyle;
    showDate?: boolean;
    disableEditing?: boolean;
    onUpdateMessage?: (messageId: string, content: string, metadata?: Record<string, string>, options?: {
        attachedFilesMetadata?: FileMetadata[];
    }) => Promise<void>;
    onCancelEditMessage?: (messageId: string) => void;
    /**
     * Callback to delete a message. Also called before resending a message that failed to send.
     * @param messageId ID of the message to delete
     */
    onDeleteMessage?: (messageId: string) => Promise<void>;
    /**
     * Callback to send a message
     * @param content The message content to send
     */
    onSendMessage?: (content: string) => Promise<void>;
    strings: MessageThreadStrings;
    messageStatus?: string;
    /**
     * Optional text to display when the message status is 'failed'.
     */
    failureReason?: string;
    /**
     * Whether the status indicator for each message is displayed or not.
     */
    showMessageStatus?: boolean;
    /**
     * Inline the accept and reject edit buttons when editing a message.
     * Setting to false will mean they are on a new line inside the editable chat message.
     */
    inlineAcceptRejectEditButtons: boolean;
    /**
     * Optional callback to render uploaded files in the message component.
     */
    onRenderFileDownloads?: (userId: string, message: ChatMessage) => JSX.Element;
    /**
     * Optional function called when someone clicks on the file download icon.
     */
    fileDownloadHandler?: FileDownloadHandler;
    remoteParticipantsCount?: number;
    onActionButtonClick: (message: ChatMessage, setMessageReadBy: (readBy: {
        id: string;
        displayName: string;
    }[]) => void) => void;
    /**
     * Optional callback to override render of the avatar.
     *
     * @param userId - user Id
     */
    onRenderAvatar?: OnRenderAvatarCallback;
    /**
     * Optional function to provide customized date format.
     * @beta
     */
    onDisplayDateTimeString?: (messageDate: Date) => string;
};
/**
 * @private
 */
export declare const ChatMessageComponent: (props: ChatMessageComponentProps) => JSX.Element;
export {};
//# sourceMappingURL=ChatMessageComponent.d.ts.map