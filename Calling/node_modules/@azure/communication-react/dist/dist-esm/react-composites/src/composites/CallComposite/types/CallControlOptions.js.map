{"version":3,"file":"CallControlOptions.js","sourceRoot":"","sources":["../../../../../../../preprocess-dist/react-composites/src/composites/CallComposite/types/CallControlOptions.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { BaseCustomStyles, ControlBarButtonStyles } from '@internal/react-components';\nimport { CustomCallControlButtonPlacement } from '../../common/ControlBar/CustomButton';\nimport { CallControlDisplayType, CommonCallControlOptions, _CommonCallControlOptions } from '../../common/types/CommonCallControlOptions';\n\n/**\n * Customization options for the control bar in calling experience.\n *\n * @public\n */\nexport type CallControlOptions = (CommonCallControlOptions & {\n  /**\n   * Show, Hide or Disable participants button during a call. This is the option only work for legacyControl bar.\n   * @defaultValue true\n   */\n  participantsButton?: boolean | {\n    disabled: boolean;\n  };\n});\n\n/**\n * While the API for the legacyControlBarExperience is in beta. Use this type to access the internal\n * API.\n * @internal\n */\nexport type _CallControlOptions = _CommonCallControlOptions & {\n  legacyControlBarExperience?: boolean;\n};\n\n/**\n * Arguments for {@link CustomCallControlButtonCallback}.\n *\n * @beta\n */\nexport interface CustomCallControlButtonCallbackArgs {\n  /**\n   * Buttons should reduce the size to fit a smaller viewport when `displayType` is `'compact'`.\n   *\n   * @defaultValue `'default'`\n   */\n  displayType?: CallControlDisplayType;\n}\n\n/**\n * Includes the base props necessary to render a {@link ControlBarButton} or {@link DrawerMenuItem}.\n *\n * @beta\n */\nexport interface CustomControlButtonProps {\n  /**\n   * Calback for when button is clicked\n   */\n  onItemClick?: () => void;\n  /**\n   * Whether the buttons is disabled\n   */\n  disabled?: boolean;\n  /**\n   * Whether the label is displayed or not.\n   *\n   * @defaultValue `false`\n   */\n  showLabel?: boolean;\n  /**\n   * Fluent styles, common to all {@link ControlBarButton}s or {@link DrawerMenuItem}s.\n   */\n  styles?: ControlBarButtonStyles | BaseCustomStyles;\n  /**\n   * Optional label for the button\n   */\n  text?: string;\n  /**\n   * A unique key for the button\n   */\n  key?: string | number;\n  /**\n   * The aria label of the button for the benefit of screen readers.\n   */\n  ariaLabel?: string;\n  /**\n   * Detailed description of the button for the benefit of screen readers.\n   */\n  ariaDescription?: string;\n  /**\n   * A unique id set for the standard HTML id attibute\n   */\n  id?: string;\n}\n\n/**\n * Response from {@link CustomCallControlButtonCallback}.\n *\n * Includes the placement prop necessary to indicate where to place the\n * {@link ControlBarButton} and a {@link DrawerMenuItem}\n *\n * @beta\n */\nexport interface CustomCallControlButtonProps extends CustomControlButtonProps {\n  /**\n   * Where to place the custom button relative to other buttons.\n   */\n  placement: CustomCallControlButtonPlacement;\n  /**\n   * Icon to render. Icon is a non-default icon name that needs to be registered as a\n   * custom icon using registerIcons through fluentui. Examples include icons from the fluentui library\n   */\n  iconName?: string;\n}\"../../../../../react-components/src\""]}