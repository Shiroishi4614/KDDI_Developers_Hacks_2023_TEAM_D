import { IContextualMenuItem } from '@fluentui/react';
import { ControlBarButton, _DrawerMenuItemProps } from "../../../../../react-components/src";
import { CustomCallControlButtonCallbackArgs, CustomControlButtonProps } from '../types/CommonCallControlOptions';
import { CallControlDisplayType } from '../types/CommonCallControlOptions';
import { CommonCallControlOptions } from '../types/CommonCallControlOptions';
/**
 * Max number of Custom Buttons in primary and secondary ControlBar
 * Does not include existing buttons in the controlBar.
 *
 * @private
 */
export declare const CUSTOM_BUTTON_OPTIONS: {
    MAX_PRIMARY_DESKTOP_CUSTOM_BUTTONS: number;
    MAX_PRIMARY_MOBILE_CUSTOM_BUTTONS: number;
    MAX_SECONDARY_DESKTOP_CUSTOM_BUTTONS: number;
};
/** @private */
export declare type CustomButtons = {
    [key in CustomCallControlButtonPlacement]: typeof ControlBarButton[] | undefined;
};
/** @private */
export declare const generateCustomCallControlBarButton: (onFetchCustomButtonProps?: CustomCallControlButtonCallback[] | undefined, displayType?: CallControlDisplayType | undefined) => CustomButtons;
/** @private */
export declare type CustomDrawerButtons = {
    [key in CustomCallControlButtonPlacement]: _DrawerMenuItemProps[];
};
/** @private */
export declare const generateCustomCallDrawerButtons: (onFetchCustomButtonProps?: CustomCallControlButtonCallback[] | undefined, displayType?: CallControlDisplayType | undefined) => CustomDrawerButtons;
/** @private */
export declare type CustomDesktopOverflowButtons = {
    [key in CustomCallControlButtonPlacement]: IContextualMenuItem[];
};
/** @private */
export declare const generateCustomCallDesktopOverflowButtons: (onFetchCustomButtonProps?: CustomCallControlButtonCallback[] | undefined, displayType?: CallControlDisplayType | undefined) => CustomDesktopOverflowButtons;
/** @private */
export declare const drawerMenuItemToContextualMenuItem: (item: _DrawerMenuItemProps) => IContextualMenuItem;
/**
 * A callback that returns the props to render a custom {@link ControlBarButton} and {@link DrawerMenuItem}.
 *
 * The response indicates where the custom button should be placed.
 *
 * Performance tip: This callback is only called when either the callback or its arguments change.
 * @beta
 */
export declare type CustomCallControlButtonCallback = (args: CustomCallControlButtonCallbackArgs) => CustomCallControlButtonProps;
/**
 * Placement for a custom button injected in the {@link CommonCallControlBar}.
 *
 * 'primary': Place the button(s) on the right end of the center control bar but before the EndCallButton (left end in rtl mode).
 * 'overflow': Place the buttons(s) on the end of the overflow Menu.
 * 'secondary': Place the button(s) on the left end of the side control bar (right in rtl mode).
 *
 * Multiple buttons assigned the same placement are appended in order.
 * E.g., if two buttons are placed in 'secondary', they'll both appear on the left end (right end in rtl mode)
 * in the order provided.
 *
 * Only 'primary' placement works when legacy call control is enabled in call composite
 *
 * @beta
 */
export declare type CustomCallControlButtonPlacement = 'primary' | 'overflow' | 'secondary';
/**
 * Response from {@link CustomCallControlButtonCallback}.
 *
 * Includes the icon and placement prop necessary to indicate where to place the
 * {@link ControlBarButton} and a {@link DrawerMenuItem}
 *
 * @beta
 */
export interface CustomCallControlButtonProps extends CustomControlButtonProps {
    /**
     * Where to place the custom button relative to other buttons.
     */
    placement: CustomCallControlButtonPlacement;
    /**
     * Icon to render. Icon is a non-default icon name that needs to be registered as a
     * custom icon using registerIcons through fluentui. Examples include icons from the fluentui library
     */
    iconName?: string;
}
/** @private */
export declare const onFetchCustomButtonPropsTrampoline: (options?: CommonCallControlOptions | undefined) => CustomCallControlButtonCallback[] | undefined;
//# sourceMappingURL=CustomButton.d.ts.map