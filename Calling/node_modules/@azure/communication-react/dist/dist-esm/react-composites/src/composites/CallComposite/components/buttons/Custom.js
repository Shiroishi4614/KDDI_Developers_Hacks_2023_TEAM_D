// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.
// eslint-disable-next-line no-restricted-imports
import { Icon } from '@fluentui/react';
import { ControlBarButton } from "../../../../../../react-components/src";
import React from 'react';
/** @private */
export const generateCustomControlBarButtons = (onFetchCustomButtonProps, displayType) => {
    const response = {
        primary: undefined,
        overflow: undefined,
        secondary: undefined
    };
    if (!onFetchCustomButtonProps) {
        return response;
    }
    const allButtonProps = onFetchCustomButtonProps.map(f => f({
        displayType
    }));
    for (const key in response) {
        response[key] = React.createElement(React.Fragment, null, allButtonProps.filter(buttonProps => buttonProps.placement === key).map((buttonProps, i) => { var _a; return React.createElement(ControlBarButton, { ariaDescription: buttonProps.ariaDescription, ariaLabel: buttonProps.ariaLabel, disabled: buttonProps.disabled, id: buttonProps.id, key: (_a = buttonProps.key) !== null && _a !== void 0 ? _a : `${buttonProps.placement}_${i}`, onClick: buttonProps.onItemClick, onRenderIcon: () => { var _a; return React.createElement(Icon, { iconName: (_a = buttonProps.iconName) !== null && _a !== void 0 ? _a : 'ControlButtonOptions' }); }, showLabel: buttonProps.showLabel, text: buttonProps.text, styles: buttonProps.styles }); }));
    }
    return response;
};
/** @private */
export const onFetchCustomButtonPropsTrampoline = (options) => {
    var _a;
    let response = undefined;
    response = (_a = options) === null || _a === void 0 ? void 0 : _a.onFetchCustomButtonProps;
    return response;
};
//# sourceMappingURL=Custom.js.map